# ultimate_server_enhanced.py - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from flask import Flask, request, jsonify, send_file, session, render_template_string
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_talisman import Talisman
import os
import hashlib
import hmac
import time
import logging
from threading import Thread, Lock
import subprocess
import re
import json
from datetime import datetime, timedelta
import secrets

app = Flask(__name__)
app.secret_key = os.urandom(32)
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(minutes=30)

# ‚ö° MAXIMUM PROTECTION CONFIGURATION ‚ö°

# Rate Limiting - —É–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç DDoS
limiter = Limiter(
    app=app,
    key_func=get_remote_address,
    default_limits=["500 per minute", "100 per second"],
    storage_uri="memory://",
)

# Security Headers - Talisman —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
csp = {
    'default-src': "'self'",
    'script-src': "'self' 'unsafe-inline'",
    'style-src': "'self' 'unsafe-inline'",
    'img-src': "'self' data: https:",
    'font-src': "'self' https://fonts.gstatic.com",
    'connect-src': "'self'",
    'frame-ancestors': "'none'",
    'form-action': "'self'"
}

talisman = Talisman(
    app,
    content_security_policy=csp,
    force_https=True,
    strict_transport_security=True,
    strict_transport_security_max_age=31536000,
    session_cookie_secure=True,
    session_cookie_http_only=True,
    session_cookie_samesite='Lax'
)

# –£–õ–£–ß–®–ï–ù–ù–´–ô FIREWALL & THREAT DETECTION
class AdvancedFirewall:
    def __init__(self):
        self.suspicious_ips = set()
        self.request_counts = {}
        self.blocked_ips = set()
        self.whitelist_ips = {'127.0.0.1', '::1'}  # –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
        self.ip_lock = Lock()
        self.suspicious_patterns = [
            r'\.\./', r'\.\.\\', r'/etc/passwd', r'wp-admin', r'phpmyadmin',
            r'\.env', r'config', r'administrator', r'union.*select', 
            r'script.*alert', r'eval\(', r'base64_decode', r'xss',
            r'<script', r'javascript:', r'vbscript:', r'onload=',
            r'benchmark\(', r'sleep\(', r'waitfor\sdelay'
        ]
        self.failed_logins = {}
        
    def check_threat(self, ip, user_agent, path, method, data):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
        if ip in self.whitelist_ips:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ URL –∏ –¥–∞–Ω–Ω—ã—Ö
        combined_check = path.lower() + " " + str(data).lower()
        
        for pattern in self.suspicious_patterns:
            if re.search(pattern, combined_check, re.IGNORECASE):
                with self.ip_lock:
                    self.blocked_ips.add(ip)
                logging.warning(f"BLOCKED: {ip} - Suspicious pattern detected: {pattern}")
                return True
        
        # Rate limiting –ø–æ IP —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
        current_time = time.time()
        with self.ip_lock:
            self.request_counts[ip] = self.request_counts.get(ip, 0) + 1
            
            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            if current_time - self.request_counts.get(f'{ip}_time', 0) > 60:
                self.request_counts[ip] = 1
                self.request_counts[f'{ip}_time'] = current_time
            
            if self.request_counts[ip] > 200:  # 200 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
                self.blocked_ips.add(ip)
                logging.warning(f"BLOCKED: {ip} - Rate limit exceeded")
                return True
                
        return False

    def add_failed_login(self, ip):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞"""
        with self.ip_lock:
            self.failed_logins[ip] = self.failed_logins.get(ip, 0) + 1
            if self.failed_logins[ip] >= 5:  # –ü–æ—Å–ª–µ 5 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                self.blocked_ips.add(ip)
                logging.warning(f"BLOCKED: {ip} - Too many failed login attempts")

    def reset_failed_logins(self, ip):
        """–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
        with self.ip_lock:
            if ip in self.failed_logins:
                del self.failed_logins[ip]

firewall = AdvancedFirewall()

# –£–õ–£–ß–®–ï–ù–ù–´–ô AI THREAT DETECTION
def ai_threat_detection(ip, headers, payload, method, path):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π AI-–¥–µ—Ç–µ–∫—Ç–æ—Ä —É–≥—Ä–æ–∑"""
    threat_score = 0
    
    # –ê–Ω–∞–ª–∏–∑ User-Agent
    suspicious_agents = ['sqlmap', 'nikto', 'metasploit', 'nmap', 'wget', 'curl', 'hydra']
    ua = headers.get('User-Agent', '').lower()
    if any(agent in ua for agent in suspicious_agents):
        threat_score += 35
    
    # –ê–Ω–∞–ª–∏–∑ payload
    dangerous_patterns = [
        r'<script.*?>', r'javascript:', r'vbscript:', r'onload=',
        r'union.*select', r'exec\(', r'system\(', r'eval\(', 
        r'base64_decode', r'document\.cookie', r'localStorage',
        r'sessionStorage', r'XMLHttpRequest', r'fetch\(.*\)'
    ]
    
    payload_str = str(payload).lower()
    for pattern in dangerous_patterns:
        if re.search(pattern, payload_str, re.IGNORECASE):
            threat_score += 30
    
    # –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–≤ –∏ –ø—É—Ç–µ–π
    if method in ['POST', 'PUT'] and any(x in path for x in ['/admin', '/login', '/api']):
        threat_score += 15
        
    # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    if firewall.request_counts.get(ip, 0) > 100:
        threat_score += 20
    
    return threat_score > 60

# –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
def generate_secure_token():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    return secrets.token_urlsafe(32)

def verify_token(token):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞"""
    if not token:
        return False
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–∏–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    return len(token) >= 10

# 2FA –°–ò–°–¢–ï–ú–ê
def generate_2fa_code():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ 2FA –∫–æ–¥–∞"""
    return ''.join([str(secrets.randbelow(10)) for _ in range(6)])

def verify_2fa_code(stored_code, provided_code):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA –∫–æ–¥–∞"""
    return stored_code == provided_code

# –°–ò–°–¢–ï–ú–ê –°–ï–°–°–ò–ô
session_tokens = {}
SESSION_TIMEOUT = 1800  # 30 –º–∏–Ω—É—Ç

def create_session(user_id, ip):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
    session_id = secrets.token_urlsafe(32)
    session_tokens[session_id] = {
        'user_id': user_id,
        'ip': ip,
        'created_at': time.time(),
        'last_activity': time.time()
    }
    return session_id

def validate_session(session_id, ip):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏"""
    if session_id not in session_tokens:
        return False
        
    session_data = session_tokens[session_id]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP
    if session_data['ip'] != ip:
        return False
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
    if time.time() - session_data['last_activity'] > SESSION_TIMEOUT:
        del session_tokens[session_id]
        return False
        
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    session_tokens[session_id]['last_activity'] = time.time()
    return True

# –£–õ–£–ß–®–ï–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
        handlers=[
            logging.FileHandler('security.log'),
            logging.FileHandler('audit.log'),  # –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è –∞—É–¥–∏—Ç–∞
            logging.StreamHandler()
        ]
    )
    
    # –õ–æ–≥–≥–µ—Ä –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    suspicious_logger = logging.getLogger('suspicious')
    suspicious_handler = logging.FileHandler('suspicious_activity.log')
    suspicious_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
    suspicious_logger.addHandler(suspicious_handler)
    suspicious_logger.propagate = False

setup_logging()

# MIDDLEWARE - —É–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@app.before_request
def security_check():
    client_ip = get_remote_address()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ firewall
    if firewall.check_threat(client_ip, 
                           request.headers.get('User-Agent'), 
                           request.path,
                           request.method,
                           request.get_data()):
        logging.warning(f"FIREWALL BLOCKED: {client_ip} - {request.path}")
        return jsonify({"error": "Access Denied", "code": 403}), 403
    
    # AI threat detection
    if ai_threat_detection(client_ip, 
                          request.headers, 
                          request.get_data(),
                          request.method,
                          request.path):
        logging.warning(f"AI THREAT BLOCKED: {client_ip} - {request.path}")
        firewall.blocked_ips.add(client_ip)
        return jsonify({"error": "Security Violation", "code": 403}), 403
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
    if request.path.startswith('/admin') and not request.path.endswith('/login'):
        token = request.headers.get('Authorization') or request.args.get('token')
        if not token or not validate_session(token, client_ip):
            return jsonify({"error": "Unauthorized", "code": 401}), 401

# ROUTES - —É–ª—É—á—à–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
@limiter.limit("200/minute")
def home():
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>üîí ULTIMATE SECURE SERVER v2.0</title>
        <style>
            body { 
                background: #0a0a0a; 
                color: #00ff00; 
                font-family: 'Courier New', monospace;
                text-align: center;
                padding: 50px;
            }
            .security-badge {
                border: 2px solid #00ff00;
                padding: 20px;
                margin: 20px;
                border-radius: 10px;
                background: rgba(0, 255, 0, 0.05);
            }
            .status-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 15px;
                margin: 20px 0;
            }
            .status-item {
                padding: 10px;
                border: 1px solid #00ff00;
                border-radius: 5px;
            }
        </style>
    </head>
    <body>
        <h1>üîí ULTIMATE SECURE SERVER v2.0</h1>
        <div class="security-badge">
            <h2>MAXIMUM PROTECTION ACTIVATED</h2>
            <div class="status-grid">
                <div class="status-item">‚úÖ Advanced Firewall</div>
                <div class="status-item">‚úÖ AI Threat Detection</div>
                <div class="status-item">‚úÖ DDoS Protection</div>
                <div class="status-item">‚úÖ Rate Limiting</div>
                <div class="status-item">‚úÖ HSTS & CSP</div>
                <div class="status-item">‚úÖ Real-time Monitoring</div>
                <div class="status-item">‚úÖ 2FA System</div>
                <div class="status-item">‚úÖ Session Management</div>
            </div>
        </div>
        <p>Server Time: <span id="time"></span></p>
        <p>Active Sessions: <span id="sessions">0</span></p>
        
        <script>
            document.getElementById('time').textContent = new Date().toLocaleString();
            setInterval(() => {
                document.getElementById('time').textContent = new Date().toLocaleString();
            }, 1000);
            
            // –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–π
            fetch('/api/status')
                .then(r => r.json())
                .then(data => {
                    document.getElementById('sessions').textContent = data.active_sessions || 0;
                });
        </script>
    </body>
    </html>
    '''

@app.route('/api/status')
@limiter.limit("100/minute")
def api_status():
    return jsonify({
        "status": "secure",
        "firewall": "active",
        "threat_level": "low",
        "server_time": time.time(),
        "active_sessions": len(session_tokens),
        "blocked_ips": len(firewall.blocked_ips),
        "protected_routes": ["/admin", "/api", "/secure"]
    })

@app.route('/admin/login', methods=['POST'])
@limiter.limit("5/minute")
def admin_login():
    client_ip = get_remote_address()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - –ø—Ä–æ—Ç–∏–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
    username = request.json.get('username')
    password = request.json.get('password')
    
    if username == 'admin' and password == 'secure_password':  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 2FA –∫–æ–¥–∞
        twofa_code = generate_2fa_code()
        session['2fa_code'] = twofa_code
        session['2fa_expires'] = time.time() + 300  # 5 –º–∏–Ω—É—Ç
        
        logging.info(f"2FA code generated for {client_ip}: {twofa_code}")
        
        return jsonify({
            "status": "2fa_required",
            "message": "Please enter 2FA code"
        })
    else:
        firewall.add_failed_login(client_ip)
        return jsonify({"error": "Invalid credentials"}), 401

@app.route('/admin/verify-2fa', methods=['POST'])
@limiter.limit("5/minute")
def verify_2fa():
    client_ip = get_remote_address()
    code = request.json.get('code')
    
    stored_code = session.get('2fa_code')
    expires = session.get('2fa_expires', 0)
    
    if not stored_code or time.time() > expires:
        return jsonify({"error": "2FA code expired"}), 401
        
    if verify_2fa_code(stored_code, code):
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        session_id = create_session('admin', client_ip)
        
        # –û—á–∏—Å—Ç–∫–∞ 2FA –¥–∞–Ω–Ω—ã—Ö
        session.pop('2fa_code', None)
        session.pop('2fa_expires', None)
        
        logging.info(f"Successful admin login from {client_ip}")
        
        return jsonify({
            "status": "success",
            "token": session_id,
            "message": "Login successful"
        })
    else:
        firewall.add_failed_login(client_ip)
        return jsonify({"error": "Invalid 2FA code"}), 401

@app.route('/admin/dashboard')
@limiter.limit("10/minute")
def admin_dashboard():
    client_ip = get_remote_address()
    token = request.headers.get('Authorization')
    
    if not validate_session(token, client_ip):
        return jsonify({"error": "Unauthorized"}), 401
        
    stats = {
        "active_sessions": len(session_tokens),
        "blocked_ips": len(firewall.blocked_ips),
        "total_requests": sum(firewall.request_counts.values()),
        "failed_logins": len(firewall.failed_logins)
    }
    
    return jsonify({
        "status": "success",
        "dashboard": "Admin Panel",
        "statistics": stats
    })

# –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
def security_monitor():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    while True:
        time.sleep(60)
        # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Å—Å–∏–π
        current_time = time.time()
        expired_sessions = [
            sid for sid, data in session_tokens.items()
            if current_time - data['last_activity'] > SESSION_TIMEOUT
        ]
        for sid in expired_sessions:
            del session_tokens[sid]
            
        logging.info(
            f"SECURITY SCAN: "
            f"Sessions: {len(session_tokens)} | "
            f"Blocked IPs: {len(firewall.blocked_ips)} | "
            f"Active IPs: {len(firewall.request_counts)}"
        )

def auto_backup():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    while True:
        time.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
        try:
            os.system(f"tar -czf backup_{timestamp}.tar.gz *.py 2>/dev/null")
            logging.info(f"Backup created: backup_{timestamp}.tar.gz")
        except Exception as e:
            logging.error(f"Backup failed: {e}")

# –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
def start_security_services():
    monitor_thread = Thread(target=security_monitor, daemon=True)
    backup_thread = Thread(target=auto_backup, daemon=True)
    monitor_thread.start()
    backup_thread.start()

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    os.makedirs('./secure_files', exist_ok=True)
    os.makedirs('./backups', exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    start_security_services()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    dev_config = {
        'host': '0.0.0.0',
        'port': 8080,
        'debug': False,
        'use_reloader': False
    }
    
    print("üöÄ ULTIMATE SECURE SERVER v2.0 STARTING...")
    print("üîí Enhanced Security Features:")
    print("   ‚úÖ Advanced Firewall with Pattern Detection")
    print("   ‚úÖ AI Threat Detection v2.0") 
    print("   ‚úÖ DDoS Protection with Rate Limiting")
    print("   ‚úÖ HSTS & CSP Headers")
    print("   ‚úÖ Real-time Monitoring")
    print("   ‚úÖ Auto Backup System")
    print("   ‚úÖ 2FA Authentication")
    print("   ‚úÖ Session Management")
    print("   ‚úÖ Suspicious Activity Logging")
    
    app.run(**dev_config)